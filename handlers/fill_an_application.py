import asyncio

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import admins_id
from keyboards.filling_an_application.inline import get_confirm_budget_markup
from keyboards.filling_an_application.reply import get_line_of_business_markup, \
    get_platform_keyboard_markup, get_phone_number_markup
from keyboards.menu_reply import get_menu_markup
from loader import bot, db_connection
from models.models import Proposal
from states import SubmitApplicationStates

fill_an_application_router = Router()

submit_application_states = SubmitApplicationStates()


@fill_an_application_router.message(F.text == '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—Éüìã')
async def handler_submit_application(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    await message.answer(
        text='–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?',
        reply_markup=get_line_of_business_markup()
    )
    await state.set_state(submit_application_states.CHOOSE_LINE_OF_BUSINESS_STATE)

    await set_timeout_timer(message.from_user.id, state)


async def set_timeout_timer(user_id, state: FSMContext):
    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
    async with state.get_data() as data:
        if not data['is_application_filling']:
            await bot.send_message(user_id, "–í—ã –∑–∞–±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É!")


@fill_an_application_router.message(
    submit_application_states.CHOOSE_LINE_OF_BUSINESS_STATE
)
async def handle_choose_line_of_business(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞."""
    if message.text not in ['–ü—Ä–æ–¥–∞–∂–∞', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥']:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        await message.answer(
            text='–ú—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–∞–∫–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å–∞',
            reply_markup=get_line_of_business_markup()
        )
        return

    await state.update_data(business_line=message.text)
    await message.answer(
        text='–•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å–∞–ª. –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –±–æ—Ç.',
        reply_markup=get_platform_keyboard_markup()
    )
    await state.set_state(submit_application_states.CHOOSE_PLATFORM_STATE)


@fill_an_application_router.message(submit_application_states.CHOOSE_PLATFORM_STATE)
async def handle_choose_platform_of_bot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ—Ç–∞."""
    if message.text not in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–í–∞—Ç—Å–∞–ø', '–í–∞–π–±–µ—Ä']:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –±–æ—Ç–∞
        await message.answer(
            text='–ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö',
            reply_markup=get_platform_keyboard_markup()
        )
        return

    await state.update_data(platform_of_bot=message.text)

    text = '–•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å–∞–ª.' \
           '\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç ?' \
           '\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "<b>5000 –¥–æ 10000</b>". –í–∞–ª—é—Ç–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω–∞—è ' \
           '–µ–¥–∏–Ω–∏—Ü–∞.'
    await message.answer(
        text=text,
        parse_mode='HTML'
    )
    await state.set_state(submit_application_states.BUDGET_REQUEST_STATE)


@fill_an_application_router.message(submit_application_states.BUDGET_REQUEST_STATE)
async def handle_budget_request(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞."""
    try:
        # –ò–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞
        budget_range = message.text.split(" –¥–æ ")
        budget_from = abs(float(budget_range[0]))
        budget_to = abs(float(budget_range[1]))
        text = f'–í–∞—à –±—é–¥–∂–µ—Ç –æ—Ç {budget_from} –¥–æ {budget_to} —É.–µ.'
        await message.answer(text=text, reply_markup=get_confirm_budget_markup())
        await state.update_data(budget_from=budget_from)
        await state.update_data(budget_to=budget_to)

    except Exception as e:
        print(e)
        text = '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "<b>5000 –¥–æ 10000</b>"'
        await message.answer(text=text, parse_mode='HTML')


@fill_an_application_router.callback_query(
    F.data == 'confirm', submit_application_states.BUDGET_REQUEST_STATE
)
async def handle_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    text = '–û—Ç–ª–∏—á–Ω–æ !' \
           ' –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏'
    await callback.message.answer(
        text=text, reply_markup=get_phone_number_markup(), parse_mode='HTML'
    )
    await callback.answer()

    await state.set_state(submit_application_states.FINISHED_APPLICATION_STATE)


@fill_an_application_router.callback_query(
    F.data == 'rewrite', submit_application_states.BUDGET_REQUEST_STATE
)
async def handle_rewrite(callback: CallbackQuery):
    """–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    text = '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "<b>5000 –¥–æ 10000</b>"'
    await callback.message.answer(text=text, parse_mode='HTML')
    await callback.answer()


@fill_an_application_router.message(
    F.contact,
    submit_application_states.FINISHED_APPLICATION_STATE
)
async def handle_finish_filling_application(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏.

        –î–µ–π—Å—Ç–≤–∏—è:
        ‚Ä¢ –ó–∞–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É;
        ‚Ä¢ –°–∫–∏–¥—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.
    """
    await state.update_data(phone_number=message.contact.phone_number)

    data = await state.get_data()
    business_line = data['business_line']
    platform_of_bot = data['platform_of_bot']
    unhandled_budget_from = data['budget_from']
    unhandled_budget_to = data['budget_to']
    phone_number = data['phone_number']

    # –ü–æ–¥—Ç–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
    budget_from = min(unhandled_budget_from, unhandled_budget_to)
    budget_to = max(unhandled_budget_from, unhandled_budget_to)
    user_id = await db_connection.get_user_id(message.from_user.id)
    budget = (budget_from, budget_to)

    proposal = Proposal(
        user_id=user_id,
        business_line=business_line,
        platform_of_bot=platform_of_bot,
        range_of_budget=(budget_from, budget_to),
        phone_number=phone_number
    )
    await db_connection.add_proposal(proposal=proposal)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
    is_admin = message.from_user.id in admins_id
    successfully_proposal_text = "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞‚úÖ"
    await message.answer(
        text=successfully_proposal_text, reply_markup=get_menu_markup(
            is_admin=is_admin
        )
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id —á–∞—Ç–æ–≤ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    admins_chat_id = []
    for admin_id in admins_id:
        chat_id = await db_connection.get_chat_id(admin_id)
        admins_chat_id.append(chat_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    proposal_text = f'–ë—ã–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∫–∞.' \
                    f'\n\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±–æ—Ç–∞: {platform_of_bot}' \
                    f'\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {business_line}' \
                    f'\n–ë—é–¥–∂–µ—Ç –æ—Ç {budget[0]} –¥–æ {budget[1]} —É.–µ' \
                    f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone_number}`'
    for chat_id in admins_chat_id:
        await bot.send_message(chat_id=chat_id, text=proposal_text, parse_mode='MARKDOWN')


@fill_an_application_router.callback_query(F.data == "menu")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é."""
    is_admin = callback.message.from_user.id in admins_id
    await state.clear()

    await callback.message.answer(
        text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—éüìã',
        reply_markup=get_menu_markup(is_admin=is_admin)
    )
    await callback.answer()
